What happens when you initialize a repository? Why do you need to do it?

On initialising a repository a .git folder is created in the current directory and git
starts keeping an eye(not full tracking changes yet) on the directory. In order for git to
do it's work, a git repository has to be initialised.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

Staging area is an intermediate stage between the working directory and the repository.
The working directory contains everything that comes out as output by the command 'ls -a'.
The repository contains what has been commit-ed. 

You also get the flexibility that you do not need to commit the entire woriking directory
you can pick what files to commit by adding them in staging area.
By adding the files to the staging area git starts tracking those files and after a
logical and big enough change is made the files in staging area can be commit-ed. One more
important feature that staging area provides is that one does not need to commit straight
away, rather than what you can do is add files to the staging area, get them under the
radar of git, and then when to commit.


How can you use the staging area to make sure you have one commit per logical
change?

Make changes to your working directory, run 'git diff' to check the changes between
working directory and staging area. If staging area is clean, 'git diff' shows the
difference between the working directory and the last commit. So by checking the output
from 'git diff' one can be sure about the changes made in the working directory. After
making a logical change(which can be checked by 'git diff') the changed files can be moved
to staging area using 'git add'. Further 'git diff --staged' can be used to check the
difference between staging area and the repository.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

In case one wants to try out an experimental feature or the basic idea behind the project
has changed quite a bit. In both the cases one would want to try out the new feature while
maintaining the already working model.


How do the diagrams help you visualize the branch structure?

instead of just in one's head, visualising branches is very helpful as it lays out all the
branches and the whole project (the unreachable and the reachable commits).


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches makes the two branches into single one. All the commits from both the
branches could be reached from the now new merged branch or the new head.
Diagramatical representation makes it easy to understand as it puts the map right infornt
of you.


What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

git's automatic merging is very good, neither fully automatic nor fully manual. Whereas
doing all merges manually would be a lot of work in a reasonably sized projects.
